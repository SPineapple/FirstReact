{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport var setSearchField = function setSearchField(text) {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\nexport var requestRobots = function requestRobots(dispatch) {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    });\n  }).catch(function (error) {\n    return dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    });\n  });\n};","map":{"version":3,"sources":["/Users/mac/Desktop/WEB DEVELOP/AdvancedWebdev/FirstReact/card-robo-2/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SAASA,mBAAT,EACGC,sBADH,EAEGC,sBAFH,EAGGC,qBAHH,QAIW,gBAJX;AAMA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD;AAAA,SAAW;AACxCC,IAAAA,IAAI,EAAEN,mBADkC;AAExCO,IAAAA,OAAO,EAAEF;AAF+B,GAAX;AAAA,CAAvB;AAKP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AAC1CA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACEC,IADF,CACO,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GADf,EAEEF,IAFF,CAEO,UAAAG,IAAI;AAAA,WAAIL,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,MAAAA,OAAO,EAACO;AAAvC,KAAD,CAAZ;AAAA,GAFX,EAGEC,KAHF,CAGQ,UAAAC,KAAK;AAAA,WAAIP,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAEH,qBAAP;AAA8BI,MAAAA,OAAO,EAACS;AAAtC,KAAD,CAAZ;AAAA,GAHb;AAIA,CANM","sourcesContent":["import { CHANGE_SEARCH_FIELD,\n\t\t\tREQUEST_ROBOTS_PENDING,\n\t\t\tREQUEST_ROBOTS_SUCCESS,\n\t\t\tREQUEST_ROBOTS_FAILED\n\t\t\t } from './constants.js';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\n}"]},"metadata":{},"sourceType":"module"}